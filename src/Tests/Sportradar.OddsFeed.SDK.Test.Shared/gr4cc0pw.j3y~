using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Sportradar.OddsFeed.SDK.Common;
using Sportradar.OddsFeed.SDK.Common.Internal;
using Sportradar.OddsFeed.SDK.Entities.REST.Internal;
using Sportradar.OddsFeed.SDK.Entities.REST.Internal.Caching;
using Sportradar.OddsFeed.SDK.Entities.REST.Internal.Enums;
using Sportradar.OddsFeed.SDK.Entities.REST.Internal.Mapping;
using Sportradar.OddsFeed.SDK.Messages;
using Sportradar.OddsFeed.SDK.Messages.Internal.REST;

namespace Sportradar.OddsFeed.SDK.Test.Shared
{
    public class TestDataRouterManager : IDataRouterManager
    {
        private static readonly string DirPath = Directory.GetCurrentDirectory() + @"\REST XMLs\";

        private const string FixtureXml = "fixtures.{culture}.xml";
        private const string ScheduleXml = "schedule.{culture}.xml";
        private const string TourScheduleXml = "tournament_schedule.{culture}.xml";
        private const string SportsXml = "sports.{culture}.xml";
        private const string TourXml = "tournaments.{culture}.xml";
        private const string MatchDetailsXml = "event_details.{culture}.xml";
        private const string RaceDetailsXml = "race_summary.xml";
        private const string TournamentScheduleXml = "tournaments.{culture}.xml";
        private const string TournamentInfoXml = "tournament_info.xml";
        private const string TournamentExtraInfoXml = "tournament_info_extra.xml";

        private const ExceptionHandlingStrategy ThrowingStrategy = ExceptionHandlingStrategy.THROW;

        private static readonly URN EventId = URN.Parse("sr:match:9210275"); // "sr:match:8629794";
        private static readonly URN SportId = URN.Parse("sr:sport:1");
        private static readonly URN TournamentId = URN.Parse("sr:tournament:1");
        private static readonly URN TournamentIdExtra = URN.Parse("sr:simple_tournament:11111");

        private static readonly CultureInfo DefaultCulture = new CultureInfo("en");
        private static readonly List<CultureInfo> Cultures = new List<CultureInfo> { new CultureInfo("en"), new CultureInfo("de"), new CultureInfo("hu") };

        private readonly ICacheManager _cacheManager;
        private readonly IDeserializer<RestMessage> _restDeserializer = new Deserializer<RestMessage>();

        public int FetchCount;

        public TestDataRouterManager(ICacheManager cacheManager)
        {
            Contract.Requires(cacheManager != null);

            _cacheManager = cacheManager;
            FetchCount = 0;
        }

        private string GetFile(string template, CultureInfo culture)
        {
            FetchCount++;
            var filePath = FileHelper.FindFile(template.Replace("{culture}", culture.TwoLetterISOLanguageName));
            if (string.IsNullOrEmpty(filePath))
            {
                filePath = FileHelper.FindFile(template.Replace("{culture}", DefaultCulture.TwoLetterISOLanguageName));
            }
            var fi = new FileInfo(filePath);
            return fi.Exists 
                ? fi.FullName 
                : filePath;
        }

        public Task GetSportEventSummaryAsync(URN id, CultureInfo culture)
        {
            var filePath = GetFile(MatchDetailsXml, culture);
            var mapper = new SportEventSummaryMapperFactory();
            var stream = FileHelper.OpenFile(filePath);
            var result = mapper.CreateMapper(_restDeserializer.Deserialize(stream)).Map();
            if (result != null)
            {
                _cacheManager.SaveDto(id, result, culture, DtoType.SportEventSummary);
            }

            return Task.FromResult(true);
        }

        public Task GetSportEventFixtureAsync(URN id, CultureInfo culture)
        {
            var filePath = GetFile(FixtureXml, culture);
            var restDeserializer = new Deserializer<fixturesEndpoint>();
            var mapper = new FixtureMapperFactory();
            var stream = FileHelper.OpenFile(filePath);
            var result = mapper.CreateMapper(restDeserializer.Deserialize(stream)).Map();
            if (result != null)
            {
                _cacheManager.SaveDto(id, result, culture, DtoType.Fixture);
            }

            return Task.FromResult(true);
        }

        public Task GetAllTournamentsForAllSportAsync(CultureInfo culture)
        {
            var filePath = GetFile(TournamentScheduleXml, culture);
            var restDeserializer = new Deserializer<tournamentsEndpoint>();
            var mapper = new TournamentsMapperFactory();
            var stream = FileHelper.OpenFile(filePath);
            var result = mapper.CreateMapper(restDeserializer.Deserialize(stream)).Map();
            if (result != null)
            {
                _cacheManager.SaveDto(URN.Parse($"sr:sports:{result.Items.Count()}"), result, culture, DtoType.SportList);
            }

            return Task.FromResult(true);
        }

        public Task GetAllSportsAsync(CultureInfo culture)
        {
            var filePath = GetFile(SportsXml, culture);
            var restDeserializer = new Deserializer<sportsEndpoint>();
            var mapper = new SportsMapperFactory();
            var stream = FileHelper.OpenFile(filePath);
            var result = mapper.CreateMapper(restDeserializer.Deserialize(stream)).Map();
            if (result != null)
            {
                _cacheManager.SaveDto(URN.Parse($"sr:sports:{result.Items.Count()}"), result, culture, DtoType.SportList);
            }

            return Task.FromResult(true);
        }

        public Task<IEnumerable<Tuple<URN, URN>>> GetLiveSportEventsAsync(CultureInfo culture)
        {
            var filePath = GetFile("live_events.xml", culture);
            var restDeserializer = new Deserializer<scheduleEndpoint>();
            var mapper = new DateScheduleMapperFactory();
            var stream = FileHelper.OpenFile(filePath);
            var result = mapper.CreateMapper(restDeserializer.Deserialize(stream)).Map();
            if (result != null)
            {
                _cacheManager.SaveDto(URN.Parse($"sr:sport_events:{result.Items.Count()}"), result, culture, DtoType.SportEventSummaryList);
                var urns = new List<Tuple<URN, URN>>();
                foreach (var item in result.Items)
                {
                    urns.Add(new Tuple<URN, URN>(item.Id, item.SportId));
                }
                return Task.FromResult(urns.AsEnumerable());
            }
            
            return Task.FromResult(null as IEnumerable<Tuple<URN, URN>>);
        }

        public Task<IEnumerable<Tuple<URN, URN>>> GetSportEventsForDateAsync(DateTime date, CultureInfo culture)
        {
            throw new NotImplementedException();
        }

        public Task<IEnumerable<Tuple<URN, URN>>> GetSportEventsForTournamentAsync(URN id, CultureInfo culture)
        {
            throw new NotImplementedException();
        }

        public Task GetPlayerProfileAsync(URN id, CultureInfo culture)
        {
            throw new NotImplementedException();
        }

        public Task GetCompetitorAsync(URN id, CultureInfo culture)
        {
            throw new NotImplementedException();
        }

        public Task<IEnumerable<URN>> GetSeasonsForTournamentAsync(URN id, CultureInfo culture)
        {
            throw new NotImplementedException();
        }

        public Task GetInformationAboutOngoingEventAsync(URN id, CultureInfo culture)
        {
            throw new NotImplementedException();
        }

        public Task GetMarketDescriptionsAsync(CultureInfo culture)
        {
            throw new NotImplementedException();
        }

        public Task GetVariantMarketDescriptionAsync(int id, string variant, CultureInfo culture)
        {
            throw new NotImplementedException();
        }

        public Task GetVariantDescriptionsAsync(CultureInfo culture)
        {
            throw new NotImplementedException();
        }

        public Task GetDrawSummaryAsync(URN drawId, CultureInfo culture)
        {
            throw new NotImplementedException();
        }

        public Task GetDrawFixtureAsync(URN drawId, CultureInfo culture)
        {
            throw new NotImplementedException();
        }

        public Task GetLotteryScheduleAsync(URN lotteryId, CultureInfo culture)
        {
            throw new NotImplementedException();
        }

        public Task<IEnumerable<URN>> GetAllLotteriesAsync(CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
